{
    "contents" : "Interactive Web Applications with R and Shiny\n========================================================\nauthor: Ian Breckheimer\ndate: November 2013\nwidth: 1366\nheight: 768\n\nCreated with [R-Presentations](http://www.rstudio.com/ide/docs/presentations/overview?)\n\nWhy put your analysis on the web?\n========================================================\n\n- Communicate an analysis with collaborators.\n- Teach statistical concepts.\n- Public outreach.\n\nExamples of Shiny apps\n========================================================\nThese range from the simple to the more complex.\n- [Exploring Properties of Distributions](http://glimmer.rstudio.com/wisconsindpi/distribution/)\n- [SNAP Climate Projections](http://spark.rstudio.com/uafsnap/akcan_climate/)\n- [Joshua Katz's Dialect Survey Maps](http://spark.rstudio.com/jkatz/SurveyMaps/)\n\nInstalling the latest version of Shiny\n=======================================================\nShiny is develping quickly. It is up on CRAN but the latest and greatest is on [GitHub](https://github.com).\n```{r, eval=FALSE, echo=TRUE}\n#install.packages(devtools)\nlibrary(devtools)\ninstall_github(\"shiny\",\"rstudio\")\nlibrary(shiny)\n```\n******\n![githb](github.png)\n\nStructure of a Shiny app\n========================================================\nserver.R\n```{r, eval=FALSE, echo=TRUE}\nshinyServer(function(input, output) {\n  ##Reacts to inputs and executes code \n  ##generating outputs when inputs change\n  })\n})\n```\nui.R\n```{r, eval=FALSE, echo=TRUE}\nshinyUI(\n  ##Defines inputs, renders outputs.\n)\n```\n\nWhy is it set up this way?\n========================================================\nReactive programming model:\n\n![Reactive](reactive.png)\n\nLets build one!\n========================================================\nOur app will be called \"Overfitting\" and we will use it to explore one of the biggest downsides of using automated model selection.\n\nOverfitting\n========================================================\nFitting a large number of parameters to a small amount of data results in a model that fits great to the data you used to build the model, but poorly on independent data.\n\n_\"... with four parameters I can fit an elephant, and with five I can make him wiggle his trunk.\"_\n\n--John von Neumann\n***\n![John](vonNeumann.gif)\n\nA simple script:\n========================================================\n```{r, eval=TRUE, results='hide'}\n##Input options\nn_covar <- 4\nn_obs <- 100\n\n##Creates random response and predictors\nresponse <- rnorm(n_obs,0,10)\ncovar_means <- rnorm(n_covar,40,20)\ncov_list <- lapply(covar_means,FUN=function(x){rnorm(n_obs,x,5)})\ncovar <- matrix(unlist(cov_list),ncol=n_covar)\nvarnames <- paste(\"X\",1:n_covar,sep=\"\")\ncolnames(covar) <- varnames\n\n##Binds everything into a data frame.\ndata <- data.frame(cbind(response,covar))\n```\n...\n\n...\n=======================================\n```{r,eval=TRUE,results='hide'}\n##Creates a formula for the saturated model.\ncov_terms <- paste(varnames,\"*\",sep=\"\",collapse=\"\")\nform_text <- paste(\"response~\",cov_terms,sep=\"\")\nform <- formula(substr(form_text, 1, nchar(form_text)-1))\n\n##Automated stepwise model selection.\nlm1 <- lm(form,data=data)\nlm2 <- step(lm1,scope=c(\"response~1\",form),trace=0)\n\n##Examines the output.\nsummary(lm2)\n```\n\nThis could be a function:\n========================================================\n```{r, eval=TRUE, echo=TRUE}\noverfit <- function(n_obs,n_covar,dir=\"both\"){\n  response <- rnorm(n_obs,0,10)\n  covar_means <- rnorm(n_covar,40,20)\n  cov_list <- lapply(covar_means,FUN=function(x){rnorm(n_obs,x,5)})\n  covar <- matrix(unlist(cov_list),ncol=n_covar)\n  varnames <- paste(\"X\",1:n_covar,sep=\"\")\n  colnames(covar) <- varnames\n  data <- data.frame(cbind(response,covar))\n  cov_terms <- paste(varnames,\"*\",sep=\"\",collapse=\"\")\n  form_text <- paste(\"response~\",cov_terms,sep=\"\")\n  form <- formula(substr(form_text, 1, nchar(form_text)-1))\n  lm1 <- lm(form,data=data)\n  lm2 <- step(lm1,scope=c(\"response~1\",form),trace=0,direction=dir)\n  return(print(summary(lm2)))\n}\n```\n\n\nFilling out the structure:\n========================================================\nserver.R\n```{r, eval=FALSE, echo=TRUE}\nlibrary(shiny)\nshinyServer(function(input, output) {\n  ##Reacts to inputs and executes code\n  ##generating outputs when inputs change.\n  })\n})\n```\nui.R\n```{r, eval=FALSE, echo=TRUE}\nlibrary(shiny)\nshinyUI(\n  ##Boxes / Sliders to change inputs.\n  ##Displays a summary of the best model.\n)\n```\n\nDrop it into server.R\n=======================================================\nserver.R\n```{r, eval=FALSE, echo=TRUE}\nlibrary(shiny)\n##Function we just created.\noverfit <- function(n_obs,n_covar){\n  ...\n}\n##Communicates with UI\nshinyServer(function(input, output) {\n  ##Expression \"fit\" reacts when inputs to function \"overfit change\"\n  fit <- reactive({overfit(input$n_obs,input$n_covar,input$sel_method)})\n  ##Renders output\n  output$print_fit <- renderPrint(fit())\n})\n```\n\nOn the UI side:\n=============================================================\nAdd inputs for all arguments.\n\nui.R\n```{r, eval=FALSE, echo=TRUE}\nlibrary(shiny)\nshinyUI(pageWithSidebar(\n  headerPanel(\"Overfitting\"),\n  sidebarPanel(\n    numericInput(\"n_obs\", \"Number of Random Observations:\", \n                min=1,max=500,value=50),\n    sliderInput(\"n_covar\", \"Number of Random Covariates:\", \n                min=1,max=5,value=4),\n    selectInput(\"sel_method\", \"Model Selection Direction\", \n                choices = c(\"backward\", \"both\"),\n                selected=\"both\")),\n  mainPanel(\n    h4(\"Step-wise selected best model:\"),\n    verbatimTextOutput(\"print_fit\"))\n))\n```\n\nNow we have an App!\n========================================================\nlaunch an App locally from the R prompt by typing:\n```{r, eval=FALSE, echo=TRUE}\nlibrary(shiny)\nsetwd(\"directory with ui.R and server.R files\")\nrunApp()\n```\nor upload it to a remote Shiny Server (via ssh):\n\n```{r,eval=FALSE,echo=TRUE}\ncd path/to/working/directory\nscp -r overfit statmos@spark.rstudio.com:ShinyApps\n```\nNow it is available at:\n[http://spark.rstudio.com/statmos/overfit/](http://spark.rstudio.com/statmos/overfit/)\n\nLets use the App to do an experiment:\n========================================================\nHow do sample size and number of covariates influence the probability of detecting spurious relationships when using automated model selection?\n\nTreatment | # Samples | # Covariates\n----------|-----------|------------\n    1     |    100    |    3     \n    2     |    100    |    5     \n    3     |    300    |    3     \n    4     |    300    |    5     \n",
    "created" : 1383683837982.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "971241439",
    "id" : "A4E9B33E",
    "lastKnownWriteTime" : 1383692586,
    "path" : "~/Desktop/Week5_Web_Interaction/shiny_demo/R_seminar_10_28.Rpres",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_presentation"
}