dates <- seq(start_date,end_date,by=chunk_days)
data_list <- list()
for (i in 2:length(dates)){
data_list[[i-1]] <- noaa(datasetid = "GHCND",datatypeid=type,stationid = stations,
startdate=as.character(dates[i-1]),enddate=as.character(dates[i]),limit=1000)
}
data <- data_list[[1]]
for (i in 2:length(data_list)){
data <- noaa_combine(data,data_list[[i]])
}
}
test <- get_ghcn_daily(as.Date("1905-01-01"),as.Date("1906-01-30"),type="PRCP",stations=stationIDs,chunk_days=10)
str(test)
get_ghcn_daily <- function(start_date,end_date,type,stations,chunk_days=10){
dates <- seq(start_date,end_date,by=chunk_days)
data_list <- list()
for (i in 2:length(dates)){
data_list[[i-1]] <- noaa(datasetid = "GHCND",datatypeid=type,stationid = stations,
startdate=as.character(dates[i-1]),enddate=as.character(dates[i]),limit=1000)
}
data <- data_list[[1]]
for (i in 2:length(data_list)){
data <- noaa_combine(data,data_list[[i]])
}
return(data)
}
test <- get_ghcn_daily(as.Date("1905-01-01"),as.Date("1906-01-30"),type="tmax",stations=stationIDs,chunk_days=10)
str(test)
class(data)
start <- as.Date("1905-01-01")
end <- as.Date("1906-10-01")
tmax_data <- get_ghcn_daily(start,end,type="TMAX",stations=stationIDs,chunk_days=10)[[1]]
tmin_data <- get_ghcn_daily(start,end,type="TMIN",stations=stationIDs,chunk_days=10)[[1]]
prcp_data <- get_ghcn_daily(start,end,type="PRCP",stations=stationIDs,chunk_days=10)[[1]]
par(mfrow=c(1,3))
plot(value~as.Date(date),data=tmax_data,pch=20,cex=0.2,col=rgb(0.5,0.5,0.5,0.5))
plot(value~as.Date(date),data=tmin_data,pch=20,cex=0.2,col=rgb(0.5,0.5,0.5,0.5))
plot(value~as.Date(date),data=prcp_data,pch=20,cex=0.2,col=rgb(0.5,0.5,0.5,0.5))
prcp_data <- get_ghcn_daily(start,end,type="PRCP",stations=stationIDs,chunk_days=10)[[1]]
tmax_data <- get_ghcn_daily(start,end,type="TMAX",stations=stationIDs,chunk_days=10)[[1]]
tmax_data <- get_ghcn_daily(start,end,type="TMAX",stations=stationIDs,chunk_days=60)[[1]]
str(tmax_data)
tail(tmax)
plot(value~as.Date(date),data=tmax_data,pch=20,cex=0.2,col=rgb(0.5,0.5,0.5,0.5))
40*60
40*20
start <- as.Date("1905-9-31")
start <- as.Date("1905-09-30")
##Gets the data.
start <- as.Date("1905-09-30")
end <- as.Date("1905-10-02")
tmax_data <- get_ghcn_daily(start,end,type="TMAX",stations=stationIDs,chunk_days=20)[[1]]
options(noaakey="NjuEQnGAERfxLrZNIiHqMUJsSeqiPuRR")
start <- as.Date("1905-09-30")
end <- as.Date("1905-10-02")
tmax_data <- get_ghcn_daily(start,end,type="TMAX",stations=stationIDs,chunk_days=20)[[1]]
start <- as.Date("1910-09-30")
end <- as.Date("1910-10-02")
tmax_data <- get_ghcn_daily(start,end,type="TMAX",stations=stationIDs,chunk_days=20)[[1]]
# Dataset, location, station and datatype
noaa(datasetid='PRECIP_HLY', locationid='ZIP:28801', stationid='COOP:310301', datatypeid='HPCP', limit=5)
stationIDs <- c("GHCND:USC00450285",
"GHCND:USC00450945",
"GHCND:USC00450969",
"GHCND:USS0021C38S",
"GHCND:USS0021B63S",
"GHCND:USC00451113",
"GHCND:USC00451110",
"GHCND:USS0021B13S",
"GHCND:USC00452493",
"GHCND:USC00452722",
"GHCND:USC00453177",
"GHCND:USC00454286",
"GHCND:USC00453219",
"GHCND:USR0000WGRN",
"GHCND:USC00453357",
"GHCND:USR0000WHAG",
"GHCND:USS0021B62S",
"GHCND:USC00454620",
"GHCND:USC00454619",
"GHCND:USC00456894",
"GHCND:USC00454764",
"GHCND:US1WALW0015",
"GHCND:USC00455425",
"GHCND:USS0021C17S",
"GHCND:USS0021C40S",
"GHCND:USC00455704",
"GHCND:USC00456201",
"GHCND:USC00456265",
"GHCND:USC00456262",
"GHCND:USS0021C35S",
"GHCND:USC00456381",
"GHCND:USS0021C33S",
"GHCND:USC00456892",
"GHCND:USC00456896",
"GHCND:USC00456898",
"GHCND:USC00456900",
"GHCND:USC00456909",
"GHCND:USC00458653",
"GHCND:USS0021C28S",
"GHCND:USC00459170",
"GHCND:USC00456385",
"GHCND:USC00459171")
get_ghcn_daily <- function(start_date,end_date,type,stations,chunk_days=20){
dates <- seq(start_date,end_date,by=chunk_days)
data_list <- list()
for (i in 2:length(dates)){
data_list[[i-1]] <- noaa(datasetid = "GHCND",datatypeid=type,stationid = stations,
startdate=as.character(dates[i-1]),enddate=as.character(dates[i]),limit=1000)
}
data <- data_list[[1]]
for (i in 2:length(data_list)){
data <- noaa_combine(data,data_list[[i]])
}
return(data)
}
start <- as.Date("1910-09-30")
end <- as.Date("1910-10-02")
tmax_data <- get_ghcn_daily(start,end,type="TMAX",stations=stationIDs,chunk_days=20)[[1]]
start <- as.Date("1980-09-30")
end <- as.Date("1980-11-30")
tmax_data <- get_ghcn_daily(start,end,type="TMAX",stations=stationIDs,chunk_days=20)[[1]]
tmin_data <- get_ghcn_daily(start,end,type="TMIN",stations=stationIDs,chunk_days=20)[[1]]
prcp_data <- get_ghcn_daily(start,end,type="PRCP",stations=stationIDs,chunk_days=20)[[1]]
##Quick plot to check validity.
par(mfrow=c(1,3))
plot(value~as.Date(date),data=tmax_data,pch=20,cex=0.2,col=rgb(0.5,0.5,0.5,0.5))
plot(value~as.Date(date),data=tmin_data,pch=20,cex=0.2,col=rgb(0.5,0.5,0.5,0.5))
plot(value~as.Date(date),data=prcp_data,pch=20,cex=0.2,col=rgb(0.5,0.5,0.5,0.5))
?loess
plot(loess(value~as.Date(date),data=tmax_data))
getOption("na.action")
loess(value~as.Date(date),data=tmax_data)
smoothScatter(as.Date(date),value)
smoothScatter(as.Date(date),value,data=tmax_data)
smoothScatter(as.Date(tmax_data$date),tmax_data$value,data=tmax_data)
scatter.smooth(as.Date(tmax_data$date),tmax_data$value,data=tmax_data)
scatter.smooth(as.Date(tmax_data$date),tmax_data$value,data=tmax_data,pch=20,cex=0.2,col=rgb(0.5,0.5,0.5,0.5))
##Quick plot to check validity.
par(mfrow=c(3,1))
scatter.smooth(as.Date(tmax_data$date),tmax_data$value,data=tmax_data,pch=20,cex=0.2,col=rgb(0.5,0.5,0.5,0.5),main="TMAX")
scatter.smooth(as.Date(tmax_data$date),tmin_data$value,data=tmax_data,pch=20,cex=0.2,col=rgb(0.5,0.5,0.5,0.5),main="TMIN")
scatter.smooth(as.Date(tmax_data$date),prcp_data$value,data=tmax_data,pch=20,cex=0.2,col=rgb(0.5,0.5,0.5,0.5),main="PRCP")
scatter.smooth(as.Date(prcp_data$date),prcp_data$value,data=tmax_data,pch=20,cex=0.2,col=rgb(0.5,0.5,0.5,0.5),main="PRCP")
scatter.smooth(as.Date(tmax_data$date),tmax_data$value,data=tmax_data,pch=20,cex=0.2,
col=rgb(0.5,0.5,0.5,0.5),main="TMAX",lpars=list(col="red"))
scatter.smooth(as.Date(tmax_data$date),tmax_data$value,data=tmax_data,pch=20,cex=0.2,
col=rgb(0.5,0.5,0.5,0.5),main="TMAX",lpars=list(col="red"),span=1)
par(mfrow=c(3,1))
scatter.smooth(as.Date(tmax_data$date),tmax_data$value,data=tmax_data,pch=20,cex=0.2,
col=rgb(0.5,0.5,0.5,0.5),main="TMAX",lpars=list(col="red"),span=0.1)
##Quick plot to check validity.
par(mfrow=c(3,1))
scatter.smooth(as.Date(tmax_data$date),tmax_data$value,data=tmax_data,pch=20,cex=0.2,
col=rgb(0.5,0.5,0.5,0.5),main="TMAX",lpars=list(col="red"),span=0.1)
scatter.smooth(as.Date(tmin_data$date),tmin_data$value,data=tmax_data,pch=20,cex=0.2,
col=rgb(0.5,0.5,0.5,0.5),main="TMIN",lpars=list(col="red"),span=0.1)
scatter.smooth(as.Date(prcp_data$date),prcp_data$value,data=tmax_data,pch=20,cex=0.2,
col=rgb(0.5,0.5,0.5,0.5),main="PRCP",lpars=list(col="red"),span=0.1)
##Quick plot to check validity.
par(mfrow=c(3,1))
scatter.smooth(as.Date(tmax_data$date),tmax_data$value,data=tmax_data,pch=20,cex=0.2,
col=rgb(0.5,0.5,0.5,0.5),main="TMAX",lpars=list(col="red"),span=0.01)
scatter.smooth(as.Date(tmin_data$date),tmin_data$value,data=tmax_data,pch=20,cex=0.2,
col=rgb(0.5,0.5,0.5,0.5),main="TMIN",lpars=list(col="red"),span=0.01)
scatter.smooth(as.Date(prcp_data$date),prcp_data$value,data=tmax_data,pch=20,cex=0.2,
col=rgb(0.5,0.5,0.5,0.5),main="PRCP",lpars=list(col="red"),span=0.01)
par(mfrow=c(3,1))
scatter.smooth(as.Date(tmax_data$date),tmax_data$value,data=tmax_data,pch=20,cex=0.2,
col=rgb(0.5,0.5,0.5,0.5),main="TMAX",lpars=list(col="red"),span=0.05)
scatter.smooth(as.Date(tmin_data$date),tmin_data$value,data=tmax_data,pch=20,cex=0.2,
col=rgb(0.5,0.5,0.5,0.5),main="TMIN",lpars=list(col="red"),span=0.05)
scatter.smooth(as.Date(prcp_data$date),prcp_data$value,data=tmax_data,pch=20,cex=0.2,
col=rgb(0.5,0.5,0.5,0.5),main="PRCP",lpars=list(col="red"),span=0.05)
##Quick plot to check validity.
par(mfrow=c(3,1))
scatter.smooth(as.Date(tmax_data$date),tmax_data$value,data=tmax_data,pch=20,cex=0.2,
col=rgb(0.5,0.5,0.5,0.5),main="TMAX",lpars=list(col="red"),span=0.2)
scatter.smooth(as.Date(tmin_data$date),tmin_data$value,data=tmax_data,pch=20,cex=0.2,
col=rgb(0.5,0.5,0.5,0.5),main="TMIN",lpars=list(col="red"),span=0.2)
scatter.smooth(as.Date(prcp_data$date),prcp_data$value,data=tmax_data,pch=20,cex=0.2,
col=rgb(0.5,0.5,0.5,0.5),main="PRCP",lpars=list(col="red"),span=0.2)
##Quick plot to check validity.
par(mfrow=c(3,1))
scatter.smooth(as.Date(tmax_data$date),tmax_data$value,data=tmax_data,pch=20,cex=0.2,
col=rgb(0.5,0.5,0.5,0.5),main="TMAX",lpars=list(col="red"),span=0.1)
scatter.smooth(as.Date(tmin_data$date),tmin_data$value,data=tmax_data,pch=20,cex=0.2,
col=rgb(0.5,0.5,0.5,0.5),main="TMIN",lpars=list(col="red"),span=0.1)
scatter.smooth(as.Date(prcp_data$date),prcp_data$value,data=tmax_data,pch=20,cex=0.2,
col=rgb(0.5,0.5,0.5,0.5),main="PRCP",lpars=list(col="red"),span=0.05)
##Gets the data.
start <- as.Date("1980-09-30")
end <- as.Date("1982-11-30")
tmax_data <- get_ghcn_daily(start,end,type="TMAX",stations=stationIDs,chunk_days=20)[[1]]
tmin_data <- get_ghcn_daily(start,end,type="TMIN",stations=stationIDs,chunk_days=20)[[1]]
prcp_data <- get_ghcn_daily(start,end,type="PRCP",stations=stationIDs,chunk_days=20)[[1]]
##Quick plot to check validity.
par(mfrow=c(3,1))
scatter.smooth(as.Date(tmax_data$date),tmax_data$value,data=tmax_data,pch=20,cex=0.2,
col=rgb(0.5,0.5,0.5,0.5),main="TMAX",lpars=list(col="red"),span=0.1)
scatter.smooth(as.Date(tmin_data$date),tmin_data$value,data=tmax_data,pch=20,cex=0.2,
col=rgb(0.5,0.5,0.5,0.5),main="TMIN",lpars=list(col="red"),span=0.1)
scatter.smooth(as.Date(prcp_data$date),prcp_data$value,data=tmax_data,pch=20,cex=0.2,
col=rgb(0.5,0.5,0.5,0.5),main="PRCP",lpars=list(col="red"),span=0.05)
##Quick plot to check validity.
par(mfrow=c(3,1))
scatter.smooth(as.Date(tmax_data$date),tmax_data$value,pch=20,cex=0.2,
col=rgb(0.5,0.5,0.5,0.5),main="TMAX",lpars=list(col="red"),span=0.1)
scatter.smooth(as.Date(tmin_data$date),tmin_data$value,pch=20,cex=0.2,
col=rgb(0.5,0.5,0.5,0.5),main="TMIN",lpars=list(col="red"),span=0.1)
scatter.smooth(as.Date(prcp_data$date),prcp_data$value,pch=20,cex=0.2,
col=rgb(0.5,0.5,0.5,0.5),main="PRCP",lpars=list(col="red"),span=0.05)
head(tmax_data)
tail(tmax_data)
##Gets the data.
start <- as.Date("1905-10-01")
end <- as.Date("2013-09-30")
tmax_data <- get_ghcn_daily(start,end,type="TMAX",stations=stationIDs,chunk_days=20)[[1]]
tmin_data <- get_ghcn_daily(start,end,type="TMIN",stations=stationIDs,chunk_days=20)[[1]]
prcp_data <- get_ghcn_daily(start,end,type="PRCP",stations=stationIDs,chunk_days=20)[[1]]
str(tmax_data)
help(krige.bayes)
library(geoR)
help(krige.bayes)
## Not run:
# generating a simulated data-set
ex.data <- grf(70, cov.pars=c(10, .15), cov.model="matern", kappa=2)
#
# defining the grid of prediction locations:
ex.grid <- as.matrix(expand.grid(seq(0,1,l=21), seq(0,1,l=21)))
#
# computing posterior and predictive distributions
# (warning: the next command can be time demanding)
ex.bayes <- krige.bayes(ex.data, loc=ex.grid,
model = model.control(cov.m="matern", kappa=2),
prior = prior.control(phi.discrete=seq(0, 0.7, l=51),
phi.prior="reciprocal"))
#
# Prior and posterior for the parameter phi
plot(ex.bayes, type="h", tausq.rel = FALSE, col=c("red", "blue"))
#
# Plot histograms with samples from the posterior
par(mfrow=c(3,1))
hist(ex.bayes)
par(mfrow=c(1,1))
# Prior and posterior for the parameter phi
plot(ex.bayes, type="h", tausq.rel = FALSE, col=c("red", "blue"))
#
str(ex.data)
install.packages('spBayes')
help(package="spBayes")
install.packages('rcharts')
library(rcharts)
library(shiny)
runApp()
RunApp()
library(shiny)
runApp()
library(rwbclimate)
install.packages(rwbclimate)
install.packages("rwbclimate")
install.packages("rWBclimate")
install_github("rWBclimate","ropensci")
library(devtools)
install_github("rWBclimate","ropensci")
help(rWBclimate)
library(rWBclimate)
help(rWBclimate)
help(package=rWBclimate)
hist_dat <- get_historical_precip(c("USA","BRA","AUS"),"year")
ggplot(hist_dat,aes(x = year,y = data, group = locator,colour = locator)) + geom_point() + geom_path() + ylab("Mean annual temperature")
hist_dat <- get_historical_precip(c("USA","BRA","AUS","CAN"),"year")
ggplot(hist_dat,aes(x = year,y = data, group = locator,colour = locator)) + geom_point() + geom_path() + ylab("Mean annual temperature")
test <- get_historical_temp("USA")
test <- get_historical_temp("USA","year")
head(test)
ggplot(test,aes(x = year,y = data, group = locator,colour = locator)) + geom_point() + geom_path() + ylab("Mean annual temperature")
test <- get_historical_temp("CAN","year")
ggplot(test,aes(x = year,y = data, group = locator,colour = locator)) + geom_point() + geom_path() + ylab("Mean annual temperature")
?get_historical_temp
data <- get_historical_temp(284,"year")
data
head(data)
colnames(data$year) <- "year"
library(ngramr)
data2 <- ngram("climate",corpus="eng_2012",year_end=2012,smoothing=0)
head(data2)
runApp()
runApp()
runApp()
runApp()
runApp()
goog
goog()
q
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
head(data)
head(data())
runApp()
data
tdata
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/Desktop/test")
runApp()
runApp()
getwd()
runApp()
library(shiny)
runApp()
options(error = recover)
runApp()
options(error = recover)
runApp()
runApp()
tdata
warnings()
errors()
?options
options(error = NULL)
runApp()
?switch
?tolower
runApp()
runApp()
head(tdata())
str(tdata)
library(shiny)
library(ngramr)
library(rWBclimate)
library(xtable)
test <- ngram("climate",year_end=2012,smoothing=0)
test2 <- get_historical_temp(322,time_scale="year")
head(test)
head(test2)
runApp()
runApp()
runApp()
tdat
tdata
colnames(tdata) <- c("year","data")
head(tdata)
tail(tdata)
runApp()
head(tdata)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?get_historical_temp
runApp()
?ylab
?axis
runApp()
runApp()
lag_data
head(tdata2)
tail(tdata2)
lines(tdata2$year,tdata2$data_lag,lty=2,col='slateblue')
lines(tdata2$year[1:(length(tdata2$year)-lag_factor())],lag_pred,lty=2)
tdata3 <- data.frame(tdata2$data,tdata2$year,data_lag=mean(tdata2$data_lag,na.rm=T))
lag_pred <- predict(model,newdata=tdata3,type='response')
model <- lm(tdata2$data~tdata2$year+tdata2$data_lag)
lag_pred <- predict(model,newdata=tdata3,type='response')
lines(tdata2$year[1:(length(tdata2$year)-lag_factor())],lag_pred,lty=2)
length(lag_pred)
length(tdata2$year[1:(length(tdata2$year)-lag_factor())])
lag_pred <- lag_pred[1:(length(lag_pred)-lag_factor())]
lines(tdata2$year[1:(length(tdata2$year)-lag_factor())],lag_pred,lty=2)
runApp()
?mtext
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
runApp()
library(rWBclimate)
tdata <- get_historical_temp(input$ccode,time_scale="year")[,c(1,2)]
tdata <- get_historical_temp("USA",time_scale="year")[,c(1,2)]
tdata
data_ts <- as.ts(tdata$data,frequency=(1/365))
head(data_ts)
str(data_ts)
library(nlme)
?corAR1()
gls <- gls(data~year,data=tdata,method="ML",correlation=corAR1(1,form=~1))
gls <- gls(data~year,data=tdata,method="ML",correlation=corAR1(1,form=~year))
gls <- gls(data~year,data=tdata,method="ML",correlation=corAR1(value=1,form=~year))
gls <- gls(data~year,data=tdata,method="ML",correlation=corAR1())
summary(gls)
ols <- lm(data~year,data=tdata)
ols
summary(ols)
summary(gls)
summary(ols)
summary(gls)
summary(ols)
summary(gls)
summary(ols)
acf(ols$residuals)
acf(gls$residuals)
gls <- gls(data~year,data=tdata,method="ML",correlation=corAR1(1))
gls <- gls(data~year,data=tdata,method="ML",correlation=corAR1(0.99))
summary(gls)
gls$residuals
acf(gls$residuals)
ar(ts_data,method='ml')
ar(data_ts,method='ml')
gls <- gls(data~year,data=tdata,method="ML",correlation=corARMA(p=5,q=0)
)
gls
acf(gls$residuals)
str(gls)
plot(ACF(gls))
plot(ACF(gls),alpha=0.05)
plot(ACF(gls),alpha=0.01)
plot(ACF(gls),alpha=0.05)
gls <- gls(data~year,data=tdata2,correlation=corARMA(p=1,q=0))
gls <- gls(data~year,data=tdata,correlation=corARMA(p=1,q=0))
summary(model)$coefficients
summary(gls)$coefficients
predict(gls)
plot(predict(gls)~year)
plot(predict(gls)~tdata$year)
str(predict(gls))
residuals(gls,type='response')
plot(residuals(gls,type='response'))
plot(residuals(ols,type='response'))
plot(residuals(gls,type='response'))
plot(residuals(gls,type='standardized'))
plot(residuals(gls,type='pearson'))
plot(residuals(gls,type='normalized'))
residuals(gls,type='normalized')
acf(residuals(gls,type='normalized'))
?rstudent
plot(residuals,ols,type='normalized')
plot(residuals(ols,type='normalized'))
plot(residuals(ols,type='pearson'))
plot(residuals(ols,type='working'))
plot(residuals(ols,type='deviance'))
plot(residuals(ols,type='partial'))
plot(residuals(ols,type='pearson'))
summary(gls)$coefficients
str(gls)
str(summary(gls))
summary(gls)
str(summary(gls))
summary(gls)$phi
summary(gls)$Phi
summary(gls)$tTable
summary(model)$coefficients
summary(ols)$coefficients
summary(gls)$coefficients
summary(gls)$tTable
summary(gls)$tTable
gls(data~year,data=tdata,correlation=corARMA(p=0,q=0))
gls(data~year,data=tdata,correlation=corARMA(p=1,q=0))
gls(data~year,data=tdata,correlation=corARMA(p=0,q=0))
gls(data~year,data=tdata,correlation=corARMA(p=1,q=0))
runApp()
runApp()
runApp()
runApp()
coefs <- summary(gls)$tTable
str(coefs)
?tableOutput
?format
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
runApp()
runApp()
output$downloadData <- downloadHandler({
##Standardizes column names
tdata <- tdata()
colnames(tdata) <- c("year","data")
runApp()
runApp()
library(quantmod)
install.packages("quantmod")
?getMetals
GetMetals
?GetMetals
library(quantmod)
?getMetals
getMetals("gold",auto.assign=F)
getMetals("gold",auto.assign=F,from=Sys.Date() - 300, to=Sys.Date)
getMetals("gold",auto.assign=F,from=Sys.Date() - 300, to=Sys.Date())
plot(getMetals("gold",auto.assign=F,from=Sys.Date() - 300, to=Sys.Date()))
getSymbols('F',auto.assign=F)
